{"version":3,"sources":["quizSections.js","App.js","index.js"],"names":["quizSections","message","value","App","useState","angles","setInput","setMessage","currentSelection","setSelection","angleString","setAngleString","triangle","setTriangle","triangleMessage","setTriangleMessage","thirdAngle","setThirdAngle","userthirdAngle","setUserThirdAngle","temp","setTemp","handleInput","e","Number","target","handleChange","randomAngleGenerator","one","Math","floor","random","two","three","maxAngle","calculateTriange","max","handleTriangleType","id","setActiveChoice","inputThirdAngle","checkThirdAngle","clear","className","map","section","key","style","display","margin","onClick","type","onBlur","onChange","length","total","reduce","a","disabled","guessThirdAngle","each","placeholder","hyp","sqrt","area","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d58af061.chunk.js","sourcesContent":["const quizSections = [\r\n  {\r\n    message: \"Is this a triangle?\",\r\n    value: \"1\"\r\n  },\r\n  {\r\n    message: \"Which Triangle is this?\",\r\n    value: \"2\"\r\n  },\r\n  {\r\n    message: \"Guess the third angle\",\r\n    value: \"3\"\r\n  },\r\n  {\r\n    message: \"Isosceles Visosceles\",\r\n    value: \"4\"\r\n  },\r\n  {\r\n    message: \"Equilateral || !(Equilateral)\",\r\n    value: \"5\"\r\n  },\r\n  {\r\n    message: \"Pythagoras ki Maut\",\r\n    value: \"6\"  \r\n  }, \r\n  {\r\n    message: \"Know your Area\",\r\n    value: \"7\"  \r\n  }\r\n]\r\n\r\nexport default quizSections","import React, { useState } from \"react\";\r\nimport \"./styles.css\";\r\nimport quizSections from \"./quizSections\";\r\n\r\nexport default function App() {\r\n  const [angles, setInput] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [currentSelection, setSelection] = useState(\"1\");\r\n  const [angleString, setAngleString] = useState(\"\");\r\n  const [triangle, setTriangle] = useState(\"\");\r\n  const [triangleMessage, setTriangleMessage] = useState(\"\");\r\n  const [thirdAngle, setThirdAngle] = useState(0);\r\n  const [userthirdAngle, setUserThirdAngle] = useState(\"\");\r\n  const [temp, setTemp] = useState(\"\");\r\n\r\n\r\n  function changeSection(value) {\r\n    setInput([]);\r\n    setMessage(\"\");\r\n    setAngleString(\"\");\r\n    setTriangle(\"\");\r\n    setTriangleMessage(\"\");\r\n    setUserThirdAngle(\"\");\r\n    setThirdAngle(\"\");\r\n    setSelection(value);\r\n  }\r\n\r\n  function handleInput(e) {\r\n    setInput((angles) => [...angles, Number(e.target.value)]);\r\n    setTemp(\"\");\r\n  }\r\n\r\n  function handleChange(e) {\r\n    setTemp(e.target.value)\r\n  }\r\n\r\n  function handleClick() {\r\n    let total = angles.reduce((total, a) => total + a);\r\n    if (total === 180) {\r\n      setMessage(\"You have correctly entered angles of a triangle\");\r\n    } else {\r\n      setMessage(\"The angles you entered does not make a triangle\");\r\n    }\r\n  }\r\n\r\n  function randomAngleGenerator() {\r\n    let one = Math.floor(Math.random() * 90) + 1;\r\n    let two = Math.floor(Math.random() * 89) + 1;\r\n    let three = 180 - (one + two);\r\n    let maxAngle = Math.max(one, two, three);\r\n    calculateTriange(maxAngle);\r\n    setAngleString(`${one} , ${two} , ${three}`);\r\n    setTriangleMessage(\"\");\r\n  }\r\n\r\n  function calculateTriange(maxAngle) {\r\n    if (maxAngle >= 90) {\r\n      if (maxAngle === 90) {\r\n        setTriangle(\"right\");\r\n      } else {\r\n        setTriangle(\"obtuse\");\r\n      }\r\n    } else {\r\n      setTriangle(\"acute\");\r\n    }\r\n  }\r\n\r\n  function handleTriangleType(e) {\r\n    if (e.target.id === triangle) {\r\n      setTriangleMessage(`${e.target.id} angled triangle is Correct answer ü§ì`);\r\n    } else {\r\n      setTriangleMessage(`${e.target.id} angled triangle is Wrong answer üôÅ`);\r\n    }\r\n  }\r\n\r\n  function setActiveChoice() {\r\n    if (triangleMessage) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function guessThirdAngle() {\r\n    let one = Math.floor(Math.random() * 90) + 1;\r\n    let two = Math.floor(Math.random() * 89) + 1;\r\n    let three = 180 - (one + two);\r\n    setAngleString(`${one} , ${two}`);\r\n    setThirdAngle(three);\r\n    setTriangleMessage(\"\");\r\n    setUserThirdAngle(\"\");\r\n  }\r\n\r\n  function inputThirdAngle(e){\r\n    setUserThirdAngle(Number(e.target.value));\r\n  }\r\n\r\n  function checkThirdAngle(){\r\n    if(thirdAngle === Number(userthirdAngle)) {\r\n      setTriangleMessage(\"You are right\")\r\n    } else {\r\n      setTriangleMessage(\"You entered wrong angle\");\r\n    }\r\n  }\r\n\r\n  function isoscelesGenerator(){\r\n    let one = Math.floor(Math.random() * 90) + 1;\r\n    let sum = 180 - one;\r\n    let each = sum / 2;\r\n    setAngleString(`${one}, ${each}`);\r\n    setThirdAngle(each);\r\n    setTriangleMessage(\"\");\r\n    setUserThirdAngle(\"\");\r\n  }\r\n\r\n  function equilateralGenerator(){\r\n    let each = 180 / 3;\r\n    setAngleString(`${each}, ${each}`);\r\n    setThirdAngle(each);\r\n    setTriangleMessage(\"\");\r\n    setUserThirdAngle(\"\");\r\n  }\r\n\r\n  function calculateHypotenuse() {\r\n    let hyp = Math.sqrt((angles[0]*angles[0]) + (angles[1] * angles[1]));\r\n    setTriangleMessage(`Hypotenuse: ${hyp}`)\r\n  }\r\n\r\n  function calculateArea() {\r\n    let area = 0.5 * angles[0] * angles[1];\r\n    setTriangleMessage(`Area of Triangle is: ${area} sq units`)\r\n  }\r\n\r\n  function clear() {\r\n    setTemp(\"\");\r\n    setInput([]);\r\n    setTriangleMessage(\"\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Fun with Geometry</h1>\r\n      <h2>An interactive way to learn geometry</h2>\r\n      {quizSections.map((section) => {\r\n        return (\r\n          <button\r\n            key={section.value}\r\n            style={{ display: \"block\", margin: \"10px auto\" }}\r\n            onClick={() => changeSection(section.value)}\r\n          >\r\n            {section.message}\r\n          </button>\r\n        );\r\n      })}\r\n      {currentSelection === \"1\" ? (\r\n        <>\r\n          <input \r\n            type=\"text\" \r\n            onBlur={handleInput} \r\n            onChange={handleChange}\r\n            value={angles[0] ? angles[0] : temp}\r\n          />\r\n          <input \r\n            type=\"text\" \r\n            onBlur={handleInput} \r\n            onChange={handleChange}\r\n            value={angles.length === 0 ? \"\" : angles[1] ? angles[1] : temp}\r\n          />\r\n          <input \r\n            type=\"text\" \r\n            onBlur={handleInput} \r\n            onChange={handleChange}\r\n            value={angles.length <= 1 ? \"\" : angles[2] ? angles[2] : temp}\r\n          />\r\n          <button onClick={handleClick}>Check</button>\r\n          <h2>{message}</h2>\r\n          <button onClick={clear}>Clear</button>\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {currentSelection === \"2\" ? (\r\n        <>\r\n          <h4>What will be the type of triangle having these angles?</h4>\r\n          <button onClick={() => randomAngleGenerator()}>Play</button>\r\n          <h3>{angleString}</h3>\r\n          {angleString ? (\r\n            <>\r\n              <button\r\n                id=\"acute\"\r\n                onClick={handleTriangleType}\r\n                disabled={setActiveChoice()}\r\n              >\r\n                Acute Angled Triangle\r\n              </button>\r\n              <button\r\n                id=\"right\"\r\n                onClick={handleTriangleType}\r\n                disabled={setActiveChoice()}\r\n              >\r\n                Right Angled Triangle\r\n              </button>\r\n              <button\r\n                id=\"obtuse\"\r\n                onClick={handleTriangleType}\r\n                disabled={setActiveChoice()}\r\n              >\r\n                Obtuse Angled Triangle\r\n              </button>\r\n            </>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <h2>{triangleMessage}</h2>\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {currentSelection === \"3\" ? (\r\n        <>\r\n          <button onClick={() => guessThirdAngle()}>Play</button>\r\n          <h2>{angleString}</h2>\r\n          <input type=\"text\" value={userthirdAngle} onChange={inputThirdAngle} />\r\n          <button onClick={checkThirdAngle}>Check</button>\r\n          <h3>{triangleMessage}</h3>\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {\r\n        currentSelection === \"4\" ?\r\n        <>\r\n          <button onClick={isoscelesGenerator}>Play</button>\r\n          <h2>{angleString}</h2>\r\n          <input type=\"text\" value={userthirdAngle} onChange={inputThirdAngle} />\r\n          <button onClick={checkThirdAngle}>Check</button>\r\n          <h3>{triangleMessage}</h3>\r\n        </> :\r\n        \"\"\r\n      }\r\n      {\r\n        currentSelection === \"5\" ?\r\n        <>\r\n          <button onClick={equilateralGenerator}>Play</button>\r\n          <h2>{angleString}</h2>\r\n          <input type=\"text\" value={userthirdAngle} onChange={inputThirdAngle} />\r\n          <button onClick={checkThirdAngle}>Check</button>\r\n          <h3>{triangleMessage}</h3>\r\n        </> :\r\n        \"\"\r\n      }\r\n      {\r\n        currentSelection === \"6\" ? \r\n        <>\r\n          <input \r\n            placeholder={\"Side A\"} \r\n            onBlur={handleInput} \r\n            onChange={handleChange}\r\n            value={angles[0] ? angles[0] : temp}\r\n          />\r\n          <input \r\n            placeholder={\"Side B\"} \r\n            onBlur={handleInput} \r\n            onChange={handleChange}\r\n            value={angles.length === 0 ? \"\" : angles[1] ? angles[1] : temp}\r\n          />\r\n          <button onClick={calculateHypotenuse}>Calculate Hypotenuse</button>\r\n          <h2>{triangleMessage}</h2>\r\n          <button onClick={clear}>Clear</button>\r\n        </> : \r\n        \"\"\r\n      }\r\n       {\r\n        currentSelection === \"7\" ? \r\n        <>\r\n          <input \r\n            placeholder={\"Base\"} \r\n            onBlur={handleInput} \r\n            onChange={handleChange}\r\n            value={angles[0] ? angles[0] : temp}\r\n          />\r\n          <input \r\n            placeholder={\"Height\"} \r\n            onBlur={handleInput} \r\n            onChange={handleChange}\r\n            value={angles.length === 0 ? \"\" : angles[1] ? angles[1] : temp}\r\n          />\r\n          <button onClick={calculateArea}>Calculate Area</button>\r\n          <h2>{triangleMessage}</h2>\r\n          <button onClick={clear}>Clear</button>\r\n        </> : \r\n        \"\"\r\n      }\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}